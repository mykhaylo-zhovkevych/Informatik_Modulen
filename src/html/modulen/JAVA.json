{
    "title": "M320",
    "mainTitle": "M320 => Objektorientiert Programmieren",
    "cards": [
        { "title": "Thems", "value": 5 },
        { "title": "Sections", "value": 11 },
        { "title": "Codes", "value": 20 }
    ],
    "charts": [
        {
            "type": "verzeichnis",
            "title": "Verzeichnis",
            "items": [
                { "label": "1. Vermerk", "id": "section1" },
                { "label": "2. ", "id": "section2" },
                { "label": "3. Block01", "id": "section3" },
                { "label": "4. Block02", "id": "section4" },
                { "label": "5. Block03", "id": "section5" },
                { "label": "6. Block04", "id": "section6" },
                { "label": "7. Block05", "id": "section7" },
                { "label": "8. Block06", "id": "section8" },
                { "label": "9. Block07", "id": "section9" },
                { "label": "10. Block08", "id": "section10" },
                { "label": "11. Block09", "id": "section11" },

                { "label": "16. Aufgabe01", "id": "section16" },
                { "label": "17. Aufgabe02", "id": "section17" },
                { "label": "18. Aufgabe03", "id": "section18" },
                { "label": "19. Aufgabe04", "id": "section19" },

                { "label": "12. Projekt Teil01", "id": "section12" },
                { "label": "13. Projekt Teil02", "id": "section13" },
                { "label": "14. Projekt Teil03", "id": "section14" },
                { "label": "15. Projekt Teil04", "id": "section15" },
                
                { "label": "20. Abschlussauswertung", "id": "section20" }
            ]
        }
    ],
    "mainTextContent": [
        {
            "type": "text",
            "content": "Einleitung",
            "id": "section1",
            "subContent": [
                {
                    "type": "HandlungsZiele",
                    "ziel": "Kompetenz: Applikationen und Schnittstellen objektorientiert modellieren, implementieren, testen und dokumentieren. Objekt: Anwendung mit 3 bis 5 fachlichen Klassen.",
                    "HandlungsnotwendigeKenntnisse": [
                        "Kennt den objektorientierten Ansatz mit den Grundkonzepten Kapselung, Vererbung und Polymorphie."
                    ]
                },
                {
                    "type": "image",
                    "src": "/imgs/gettyimages-1146649674-1024x1024.webp",
                    "alt": "Descriptive Alt Text",
                    "id": "section6"
                }
            ]
        },
        {
            "type": "text",
            "content": "Grundlagen",
            "id": "section2",
            "subContent": [
                {
                    "_comment": "Start of OOP",
                    "type": "sub-text",
                    "content": "Definition => Objektorientiertes Denken: Beim objektorientierten Denken geht es darum, Probleme und Lösungen in Form von Objekten zu modellieren. Man stellt sich vor, wie die verschiedenen Objekte interagieren und zusammenarbeiten, um das gewünschte Verhalten des Systems zu erreichen. Dabei werden die Prinzipien der Kapselung, Vererbung und Polymorphismus genutzt, um ein flexibles, erweiterbares und wartbares System zu entwickeln."
                },
                {
                    "_comment": "What is Object",
                    "type": "sub-text",
                    "content": "Definition => Ein Objekt ist eine Instanz einer Klasse. Wenn eine Klasse wie eine Schablone ist, dann ist ein Objekt ein konkretes Exemplar, das nach dieser Schablone erstellt wurde. Jedes Objekt hat seinen eigenen Zustand, der durch die Attribute der Klasse definiert wird."
                },
                {
                    "_comment": "What is Class",
                    "type": "sub-text",
                    "content": "Definition => Eine Klasse ist ein Bauplan oder eine Vorlage für Objekte. Sie definiert, welche Attribute und Methoden die Objekte dieser Klasse haben werden. Man kann sich eine Klasse wie eine Schablone vorstellen."
                },
                {
                    "_comment": "What is Attribute",
                    "type": "sub-text",
                    "content": "Definition => Attribute sind Variablen, die den Zustand eines Objekts beschreiben. Zum Beispiel könnte ein Auto-Objekt Attribute wie Farbe, Marke und Geschwindigkeit haben."
                },
                {
                    "_comment": "What is Methods",
                    "type": "sub-text",
                    "content": " Definition => Methoden in der OOP sind Funktionen, die innerhalb einer Klasse definiert sind und das Verhalten der Objekte dieser Klasse beschreiben. Zweck => Sie ermöglichen es Objekten, Aktionen auszuführen und auf ihre eigenen Daten zuzugreifen oder diese zu verändern."
                },
                {
                    "type": "sub-layout",
                    "subContent": [
                        {
                            "type": "sub-text",
                            "content": "Definition => Instanzmethoden sind Methoden, die auf einer Instanz einer Klasse arbeiten. Diese Methoden können auf die Attribute (Instanzvariablen) des Objekts zugreifen und diese verändern. Sie werden über ein Objekt der Klasse aufgerufen. Zweck => Instanzmethoden werden verwendet, um Verhalten zu definieren, das spezifisch für einzelne Objekte ist. Sie ermöglichen es den Objekten, Aktionen auszuführen und auf ihren Zustand zu reagieren."
                        },
                        {
                            "type": "sub-text",
                            "content": "Definition => Klassenmethoden sind Methoden, die auf der Klasse selbst und nicht auf Instanzen der Klasse arbeiten. Sie werden in Java mit dem Schlüsselwort static deklariert. Zweck => Klassenmethoden werden verwendet, um Verhalten zu definieren, das sich auf die Klasse als Ganzes bezieht, anstatt auf einzelne Instanzen. Sie sind nützlich für: Utility- oder Hilfsfunktionen, die allgemeine Operationen durchführen, die nicht von einer bestimmten Instanz abhängen. Und Zugriff auf Klassenvariablen: Sie können auf statische Variablen der Klasse zugreifen und diese manipulieren, da diese ebenfalls zur Klasse und nicht zu einer Instanz gehören."
                        },
                        {
                            "type": "sub-text",
                            "content": "Definition => Statische Methoden sind eine spezielle Art von Klassenmethoden, die unabhängig von Instanzen der Klasse sind. Sie benötigen keine Referenz auf ein Objekt der Klasse und können direkt über die Klasse aufgerufen werden. Zweck => Statische Methoden sind besonders nützlich für: Allgemeine Utility-Funktionen: Funktionen, die keine Informationen über den Zustand einer bestimmten Instanz benötigen und somit unabhängig von Instanzvariablen sind. Und  Kapselung von Funktionen: Sie bieten eine Möglichkeit, allgemeine Funktionen innerhalb der Klasse zu kapseln, die weder Instanzvariablen noch Methoden benötigen."
                        }
                    ]
                }
                
            ]
        }
    ]
}
